

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;
import rs.etf.pp1.symboltable.concepts.*;
import rs.ac.bg.etf.pp1.SyntaxAnalysis;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
        SyntaxAnalysis.errorDetected();
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
        SyntaxAnalysis.errorDetected();
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol){
            msg.append (" na liniji ").append(((Symbol)info).left);
            if (((Symbol) info).value != null) {
				msg.append(" prilikom obrade simbola ").append(((Symbol) info).value.toString());
			}
          } 
          SyntaxAnalysis.errorDetected();
        log.error(msg.toString());
    }


:}



terminal PROG, LBRACE, TIMES, MINUS, RBRACE,EXTENDS, TRUE, FALSE, CLASS, SEMI,LBRACKET, RBRACKET, LPAREN, RPAREN, EQUAL, RETURN, PLUS, COMMA, PRINT, VOID, CONST;
terminal Integer NUMBER;
terminal String IDENT, LETTER, PLUSPLUS, MINUSMINUS;
terminal IF, ELSE, GREATEREQUAL, LESSEQUAL;
terminal OR, AND, EXCL, NEW, LESS, POINT, GREATER, COL, QUEST, DIV, MOD, BREAK, CONTINUE, READ;
terminal DO, WHILE,CASE, SWITCH, SAME, DIFFERENT;
nonterminal Program Program;
nonterminal DeclList DeclList;
nonterminal DeclPart DeclPart;
nonterminal JustVarDecl JustVarDecl;
nonterminal VarDeclList VarDeclList;
nonterminal SingleVarDecl SingleVarDecl;
nonterminal ConstDeclList ConstDeclList;
nonterminal OptionalMethodDecl OptionalMethodDecl;
nonterminal MethodDecl MethodDecl;
nonterminal SingleMethodDecl SingleMethodDecl;
nonterminal FormPars FormPars;
nonterminal ParamDecl ParamDecl;
nonterminal ParamList ParamList;
nonterminal OptionalArraySpec OptionalArraySpec;
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal Matched Matched;
nonterminal Unmatched Unmatched;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal DesignParam DesignParam;
nonterminal AdditionalList AdditionalList;
nonterminal ActPars ActPars;
nonterminal ActualParamList ActualParamList;
nonterminal SimpleRel SimpleRel;
nonterminal ClassRel ClassRel;
nonterminal TernaryCondition TernaryCondition;
nonterminal Col Col;
nonterminal OptionalOp OptionalOp;
nonterminal OptionalMinus OptionalMinus;
nonterminal Mulop Mulop;
nonterminal Addop Addop;
nonterminal Assignop Assignop;
nonterminal Relop Relop;
nonterminal SingleParameter SingleParameter;
nonterminal OptionalSecondParam OptionalSecondParam;
nonterminal ExpressionType ExpressionType;
nonterminal CaseList CaseList;
nonterminal CaseDecl CaseDecl;
nonterminal Else Else;
nonterminal DoWhileConditionLoad DoWhileConditionLoad;
nonterminal MatchedList MatchedList;
nonterminal AdditionForCall AdditionForCall;
nonterminal FormParDecl FormParDecl;
nonterminal MethodSign MethodSign;
nonterminal Do Do;
nonterminal Switch Switch;
nonterminal CaseStart CaseStart;
nonterminal Case Case;
nonterminal DesignatorList DesignatorList;
nonterminal ConditionPart ConditionPart;
nonterminal ClassFieldDecList ClassFieldDecList;
nonterminal VarDecl VarDecl;
nonterminal ClassDecl ClassDecl;
nonterminal SingleConstDecl SingleConstDecl;
nonterminal ConstDecl ConstDecl;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgramName, DesignatorName, AdditionalElement, ClassName, AllocationType, MethodName, Designator, OptionalParent;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Initializer, RetType, BoolInitializer, Factor; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct Expr1, Expr, OptionalExpression, OptionalAfterReturn, Term;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Condition, CondTerm, CondFact, AssignStatement;

precedence left ELSE;

Program ::= (Program) PROG ProgramName:prog DeclList:D1 LBRACE MethodDecl:M2 RBRACE {: RESULT=new Program(prog, D1, M2); RESULT.setLine(progleft); :};

ProgramName ::= (ProgramName) IDENT:progName {: RESULT=new ProgramName(progName); RESULT.setLine(progNameleft); :};

DeclList ::= (VarDeclarations) DeclList:D1 DeclPart:D2 {: RESULT=new VarDeclarations(D1, D2); RESULT.setLine(D1left); :}
			|
			(NoVarDecl) {: RESULT=new NoVarDecl(); :} /*epsilon*/
			;
DeclPart ::= (VariableDeclaration) VarDecl:V1 {: RESULT=new VariableDeclaration(V1); RESULT.setLine(V1left); :}
            |
			(ConstantDeclaration) ConstDecl:C1 {: RESULT=new ConstantDeclaration(C1); RESULT.setLine(C1left); :}
			|
			(ClassDeclaration) ClassDecl:C1 {: RESULT=new ClassDeclaration(C1); RESULT.setLine(C1left); :};

VarDecl::= (VarDecl1) Type:varType VarDeclList:V1 SEMI {: RESULT=new VarDecl1(varType, V1); RESULT.setLine(varTypeleft); :}
           |
           (ErrorDecl) error {: RESULT=new ErrorDecl(); :};
			

VarDeclList ::= (VariableList) VarDeclList:V1 COMMA SingleVarDecl:S2 {: RESULT=new VariableList(V1, S2); RESULT.setLine(V1left); :}
				|
				(FirstDeclaration) SingleVarDecl:S1 {: RESULT=new FirstDeclaration(S1); RESULT.setLine(S1left); :}
				|
				(ErrorVarDcl) error {: RESULT=new ErrorVarDcl(); :}
                ;		 
				
SingleVarDecl ::= (SingleVarDecl) IDENT:varName OptionalArraySpec:O1 {: RESULT=new SingleVarDecl(varName, O1); RESULT.setLine(varNameleft); :};

OptionalArraySpec ::= (ArraySpecifier) LBRACKET RBRACKET {: RESULT=new ArraySpecifier(); :}
					  |
					  (NotArray) {: RESULT=new NotArray(); :}/*epsilon*/;	 

ConstDecl::=(ConstDecl) CONST Type:typeName ConstDeclList:C1 SEMI {: RESULT=new ConstDecl(typeName, C1); RESULT.setLine(typeNameleft); :};

ConstDeclList ::= (ConstList) ConstDeclList:C1 COMMA SingleConstDecl:S2 {: RESULT=new ConstList(C1, S2); RESULT.setLine(C1left); :}
				  |
				  (FisrtConstInList) SingleConstDecl:S1 {: RESULT=new FisrtConstInList(S1); RESULT.setLine(S1left); :};
				  
SingleConstDecl ::= (SingleConstDeclaration) IDENT:constName EQUAL Initializer:type {: RESULT=new SingleConstDeclaration(constName, type); RESULT.setLine(constNameleft); :};

Initializer::= (BoolInit) BoolInitializer:value {: RESULT=new BoolInit(value); RESULT.setLine(valueleft); :}
			   |
			   (IntInit) NUMBER:value {: RESULT=new IntInit(value); RESULT.setLine(valueleft); :}
			   |
			   (CharInit) LETTER:value {: RESULT=new CharInit(value); RESULT.setLine(valueleft); :};  

BoolInitializer ::= (FalseValue) FALSE {: RESULT=new FalseValue(); :}
                    |
                    (TrueValue) TRUE {: RESULT=new TrueValue(); :};

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};



ClassDecl::= (ClassDecl)  CLASS ClassName:className LBRACE JustVarDecl:J1 OptionalMethodDecl:O2 RBRACE {: RESULT=new ClassDecl(className, J1, O2); RESULT.setLine(classNameleft); :}; 

ClassName::= (ClassName) IDENT:className OptionalParent:superClass {: RESULT=new ClassName(className, superClass); RESULT.setLine(classNameleft); :};

OptionalParent ::=  (ParentSpecification) EXTENDS Type:superClassName {: RESULT=new ParentSpecification(superClassName); RESULT.setLine(superClassNameleft); :}
					|
					(ExtendError) error {: RESULT=new ExtendError(); :}
					|
					(NoSuperclass) {: RESULT=new NoSuperclass(); :} /*epsilon*/;
					
MethodDecl ::= (MethodDeclarationList) MethodDecl:M1 SingleMethodDecl:S2 {: RESULT=new MethodDeclarationList(M1, S2); RESULT.setLine(M1left); :}
			   |
			   (NoMethodDecl) {: RESULT=new NoMethodDecl(); :} /*epsilon*/
			   ;
SingleMethodDecl ::= (MethodDeclaration) MethodSign:methName JustVarDecl:J1 LBRACE StatementList:S2 RBRACE {: RESULT=new MethodDeclaration(methName, J1, S2); RESULT.setLine(methNameleft); :};					

MethodSign::= (MethodSign) MethodName:methName LPAREN FormPars:F1 RPAREN {: RESULT=new MethodSign(methName, F1); RESULT.setLine(methNameleft); :};

MethodName::= (MethodName) RetType:retT IDENT:methName {: RESULT=new MethodName(retT, methName); RESULT.setLine(retTleft); :};

RetType ::= (RegularType) Type:retT {: RESULT=new RegularType(retT); RESULT.setLine(retTleft); :}
			|
			(VoidType) VOID {: RESULT=new VoidType(); :};
			
JustVarDecl::=(JustVars) JustVarDecl:J1 VarDecl:V2 {: RESULT=new JustVars(J1, V2); RESULT.setLine(J1left); :}
			  |
			  (NoVars) {: RESULT=new NoVars(); :} /*epsilon*/; 				


OptionalMethodDecl ::= (ClassMethodList) LBRACE MethodDecl:M1 RBRACE {: RESULT=new ClassMethodList(M1); RESULT.setLine(M1left); :}
					   |
					   (NoMethodInClass) {: RESULT=new NoMethodInClass(); :}/*epsilon*/;
					   
FormPars ::= (ParamLists) ParamList:P1 {: RESULT=new ParamLists(P1); RESULT.setLine(P1left); :} 
             |
			 (NoParams) {: RESULT=new NoParams(); :} /*epsilon*/; 

ParamList ::= (FormParams) ParamList:P1 COMMA ParamDecl:P2 {: RESULT=new FormParams(P1, P2); RESULT.setLine(P1left); :} 
			  |
			  (FirstParam) ParamDecl:P1 {: RESULT=new FirstParam(P1); RESULT.setLine(P1left); :}
			  |
			  (ParamError) error {: RESULT=new ParamError(); :} 
              ; 
               		 
ParamDecl ::= (MethodParamDecl) Type:paramType FormParDecl:F1 {: RESULT=new MethodParamDecl(paramType, F1); RESULT.setLine(paramTypeleft); :};

             

FormParDecl::= (FormParDecl) IDENT:paramName OptionalArraySpec:O1 {: RESULT=new FormParDecl(paramName, O1); RESULT.setLine(paramNameleft); :};

StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :}
				  |
				  (NoStmt) {: RESULT=new NoStmt(); :} /*epsilon*/
				  ;				  

ConditionPart::= (RightCondition) LPAREN Condition:condType RPAREN {: RESULT=new RightCondition(condType); RESULT.setLine(condTypeleft); :}
			     |
			     (ErrorCondition) LPAREN error RPAREN:l
			     {:parser.report_error("Izvrsen oporavak do znaka ')' na liniji, " + lleft, null);:} {: RESULT=new ErrorCondition(); :}
			     ;
			
Statement ::= (DesStatement) DesignatorStatement:D1 {: RESULT=new DesStatement(D1); RESULT.setLine(D1left); :}
		    |
		    (MatchedStatement) IF ConditionPart:type Statement:S1 Else:E2 Statement:S3 {: RESULT=new MatchedStatement(type, S1, E2, S3); RESULT.setLine(typeleft); :}
		    |
		    (UnmatchedIf) IF ConditionPart:type Statement:S1 {: RESULT=new UnmatchedIf(type, S1); RESULT.setLine(typeleft); :} 
		    |
		    (ContinueStatement) CONTINUE SEMI {: RESULT=new ContinueStatement(); :}
		    |
		    (DoWhileLoop) Do:D1 Statement:S2 WHILE DoWhileConditionLoad:D3 Condition:C4 RPAREN SEMI {: RESULT=new DoWhileLoop(D1, S2, D3, C4); RESULT.setLine(D1left); :}
		    |
		    (BreakStatement) BREAK SEMI {: RESULT=new BreakStatement(); :}
		    |
		    (ReturnStatement) RETURN OptionalAfterReturn:type SEMI {: RESULT=new ReturnStatement(type); RESULT.setLine(typeleft); :}
		    |
		    (ReadFunctionCall) READ LPAREN Designator:des RPAREN SEMI {: RESULT=new ReadFunctionCall(des); RESULT.setLine(desleft); :}
		    |
		    (PrintFunctionCall) PRINT LPAREN Expr:type OptionalSecondParam:type1 RPAREN SEMI {: RESULT=new PrintFunctionCall(type, type1); RESULT.setLine(typeleft); :}
		    |
		    (SwitchStatement) Switch:S1 LBRACE CaseList:C2 RBRACE {: RESULT=new SwitchStatement(S1, C2); RESULT.setLine(S1left); :}
		    |
		    (MatchedListSt) LBRACE StatementList:S1 RBRACE {: RESULT=new MatchedListSt(S1); RESULT.setLine(S1left); :}
		    ;

DoWhileConditionLoad ::= (DoWhileConditionLoad) LPAREN {: RESULT=new DoWhileConditionLoad(); :};

Else ::= (Else) ELSE {: RESULT=new Else(); :};

Do ::= (DoWhileStart) DO {: RESULT=new DoWhileStart(); :};

Switch ::= (SwitchStart) SWITCH  LPAREN Expr:type RPAREN {: RESULT=new SwitchStart(type); RESULT.setLine(typeleft); :};
	
CaseList ::= (CaseListDecl) CaseList:C1 CaseDecl:C2 {: RESULT=new CaseListDecl(C1, C2); RESULT.setLine(C1left); :}
             |
             (NoCaseList) {: RESULT=new NoCaseList(); :} /*epsilon*/; 
               		    
CaseDecl ::= (CaseStatement) CaseStart:C1 COL StatementList:S2 {: RESULT=new CaseStatement(C1, S2); RESULT.setLine(C1left); :};		    
		    
CaseStart ::= (CaseStart) CASE NUMBER:value {: RESULT=new CaseStart(value); RESULT.setLine(valueleft); :};
		   
OptionalSecondParam ::= (PrintSecondParam) COMMA NUMBER:value {: RESULT=new PrintSecondParam(value); RESULT.setLine(valueleft); :}
                        |
                        (NoSecondParam) {: RESULT=new NoSecondParam(); :} /*epsilon*/;
                                              
DesignatorStatement ::=  (AssignStatementSt) Designator:des  AssignStatement:A1 SEMI {: RESULT=new AssignStatementSt(des, A1); RESULT.setLine(desleft); :}
                		 |
                         (FuncCallSt) Designator:des LPAREN ActPars:A1 RPAREN SEMI {: RESULT=new FuncCallSt(des, A1); RESULT.setLine(desleft); :}
				         |
				         (IncrementSt) Designator:des PLUSPLUS:P1 SEMI {: RESULT=new IncrementSt(des, P1); RESULT.setLine(desleft); :}
				         |
				         (DecrementSt) Designator:des MINUSMINUS:M1 SEMI {: RESULT=new DecrementSt(des, M1); RESULT.setLine(desleft); :};
										
AssignStatement::= (AssignStm) Assignop:A1 Expr:exType {: RESULT=new AssignStm(A1, exType); RESULT.setLine(A1left); :}
				   |
				   (AssignError) error {: RESULT=new AssignError(); :};
				
ActPars ::= (AcParamList) ActualParamList:A1 {: RESULT=new AcParamList(A1); RESULT.setLine(A1left); :}
		    |
			(NoActPars) {: RESULT=new NoActPars(); :} /*epsilon*/;
 
ActualParamList ::= (ParameterList) ActualParamList:A1 COMMA SingleParameter:S2 {: RESULT=new ParameterList(A1, S2); RESULT.setLine(A1left); :}
 			        |
 			        (FirstParamExpr) SingleParameter:S1 {: RESULT=new FirstParamExpr(S1); RESULT.setLine(S1left); :};
 			        
SingleParameter::=(SingleParameter) Expr:t {: RESULT=new SingleParameter(t); RESULT.setLine(tleft); :};

Designator ::= (DesignatorDecl) DesignatorName:D1 AdditionalList:A2 {: RESULT=new DesignatorDecl(D1, A2); RESULT.setLine(D1left); :};

DesignatorName ::= (DesignatorName) IDENT:varName {: RESULT=new DesignatorName(varName); RESULT.setLine(varNameleft); :};

AdditionalList ::= (AdditionalPart) AdditionalList:A1 AdditionalElement:A2 {: RESULT=new AdditionalPart(A1, A2); RESULT.setLine(A1left); :}
				   |
				   (NoAdditional) {: RESULT=new NoAdditional(); :} /*epsilon*/;
					
AdditionalElement ::=(AccessField) POINT IDENT:varName {: RESULT=new AccessField(varName); RESULT.setLine(varNameleft); :} 
					 |
					 (AccessElement) LBRACKET Expr:exType RBRACKET {: RESULT=new AccessElement(exType); RESULT.setLine(exTypeleft); :};

Condition ::= (ConditionExpr)  Condition:type1 OR CondTerm:type2 {: RESULT=new ConditionExpr(type1, type2); RESULT.setLine(type1left); :}
			  |
			  (SingleCondTerm) CondTerm:type2 {: RESULT=new SingleCondTerm(type2); RESULT.setLine(type2left); :};
			  
CondTerm ::= (ConditionTerm) CondTerm:type1 AND CondFact:type2 {: RESULT=new ConditionTerm(type1, type2); RESULT.setLine(type1left); :}
		     |
		     (SingleFact) CondFact:type2 {: RESULT=new SingleFact(type2); RESULT.setLine(type2left); :};	


CondFact ::= (LogicalExpr) Expr:type {: RESULT=new LogicalExpr(type); RESULT.setLine(typeleft); :}
			 |
			 (OptionalOperator) Expr:type1 Relop:R1 Expr:type2 {: RESULT=new OptionalOperator(type1, R1, type2); RESULT.setLine(type1left); :};


Expr  ::= (CondExpr) TernaryCondition:T1 QUEST Expr1:type1 Col:C2 Expr1:type2 {: RESULT=new CondExpr(T1, type1, C2, type2); RESULT.setLine(T1left); :}
          |
          (SimpleExpr) Expr1:type {: RESULT=new SimpleExpr(type); RESULT.setLine(typeleft); :}
          ;
 
TernaryCondition ::= (TernaryCondition) Expr1:E1 {: RESULT=new TernaryCondition(E1); RESULT.setLine(E1left); :};

Col ::= (Col) COL {: RESULT=new Col(); :};
 
                    
Expr1 ::= (MinusExpr) MINUS Term:tt {: RESULT=new MinusExpr(tt); RESULT.setLine(ttleft); :}
		  |
		  (FirstTerm) Term:tt1 {: RESULT=new FirstTerm(tt1); RESULT.setLine(tt1left); :}
          |
          (NOMinusExpr) Expr1:type2 Addop:A1 Term:tt2 {: RESULT=new NOMinusExpr(type2, A1, tt2); RESULT.setLine(type2left); :};	

          
Term ::= (CompositeTerm) Term:type1 Mulop:M1 Factor:type2 {: RESULT=new CompositeTerm(type1, M1, type2); RESULT.setLine(type1left); :}
		 |
		 (SingleTermDecl) Factor:type {: RESULT=new SingleTermDecl(type); RESULT.setLine(typeleft); :};
		 

Factor ::= (SimpleDesignator) Designator:desType {: RESULT=new SimpleDesignator(desType); RESULT.setLine(desTypeleft); :}
           |
           (FunctionCallDesign) Designator:desType LPAREN ActPars:A1 RPAREN {: RESULT=new FunctionCallDesign(desType, A1); RESULT.setLine(desTypeleft); :} 
           |
           (NumberDecl) NUMBER:constValue {: RESULT=new NumberDecl(constValue); RESULT.setLine(constValueleft); :}
           |
           (Letter) LETTER:constValue {: RESULT=new Letter(constValue); RESULT.setLine(constValueleft); :}
           |
           (BoolValue) BoolInitializer:constValue {: RESULT=new BoolValue(constValue); RESULT.setLine(constValueleft); :}
           |
           (ExpressionFactor) LPAREN Expr:exprType RPAREN {: RESULT=new ExpressionFactor(exprType); RESULT.setLine(exprTypeleft); :}
           |
           (MemoryAllocation) NEW AllocationType:A1 OptionalExpression:type {: RESULT=new MemoryAllocation(A1, type); RESULT.setLine(A1left); :};
				
AllocationType::=(AllocationType) Type:varType {: RESULT=new AllocationType(varType); RESULT.setLine(varTypeleft); :}; 

OptionalExpression ::= (SingleExpressionDecl) LBRACKET Expr:exType RBRACKET {: RESULT=new SingleExpressionDecl(exType); RESULT.setLine(exTypeleft); :}
					   |
					   (NoOptExpr) {: RESULT=new NoOptExpr(); :} /*epsilon*/;	

OptionalAfterReturn ::= (ExprAfterReturn) Expr:type {: RESULT=new ExprAfterReturn(type); RESULT.setLine(typeleft); :}
                        |
                        (NoAfterRet) {: RESULT=new NoAfterRet(); :} /*epsilon*/;

Addop ::= (Addition) PLUS {: RESULT=new Addition(); :}
          |
          (Subtraction) MINUS {: RESULT=new Subtraction(); :};
                                 
Mulop ::= (Multiplication) TIMES {: RESULT=new Multiplication(); :}
          |
          (Division) DIV {: RESULT=new Division(); :}
          |
          (Remaining) MOD {: RESULT=new Remaining(); :};
          
Assignop::= (Assignop) EQUAL {: RESULT=new Assignop(); :};

Relop ::= (ClassComp) ClassRel:C1 {: RESULT=new ClassComp(C1); RESULT.setLine(C1left); :}
		  |
		  (SimpleComp) SimpleRel:S1 {: RESULT=new SimpleComp(S1); RESULT.setLine(S1left); :};
     			 				    			  

ClassRel ::= (ComparisonEqual) SAME {: RESULT=new ComparisonEqual(); :}
			 |
			 (ComparionDiffernet) DIFFERENT {: RESULT=new ComparionDiffernet(); :};

SimpleRel ::= (ComparisonGrater) GREATER {: RESULT=new ComparisonGrater(); :}
		  	  |
		      (CompGraterEqual) GREATEREQUAL {: RESULT=new CompGraterEqual(); :}
		      |
		      (ComparisonLess) LESS {: RESULT=new ComparisonLess(); :}
		      |  			  	     	
		      (ComparisonLessEqual) LESSEQUAL {: RESULT=new ComparisonLessEqual(); :};
		

