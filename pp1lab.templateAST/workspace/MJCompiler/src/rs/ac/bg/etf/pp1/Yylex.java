/* The following code was generated by JFlex 1.4.3 on 12/31/20, 1:25 PM */

package rs.ac.bg.etf.pp1;

import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by <a href="http://www.jflex.de/">JFlex</a>
 * 1.4.3 on 12/31/20, 1:25 PM from the specification file
 * <tt>spec/MJlexer.flex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

    /** This character denotes the end of file */
    public static final int YYEOF = -1;

    /** initial size of the lookahead buffer */
    private static final int ZZ_BUFFERSIZE = 16384;

    /** lexical states */
    public static final int YYINITIAL = 0;
    public static final int COMMENT = 2;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
     * beginning of a line l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = { 0, 0, 1, 1 };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED = "\10\0\1\2\1\2\1\3\1\0\1\2\1\4\22\0\1\1\1\44"
	    + "\3\65\1\52\1\50\1\64\1\33\1\34\1\26\1\24\1\32\1\25"
	    + "\1\55\1\27\12\61\1\54\1\31\1\46\1\30\1\45\1\41\1\65"
	    + "\32\62\1\37\1\65\1\40\1\65\1\63\1\65\1\12\1\42\1\10"
	    + "\1\20\1\6\1\51\1\57\1\53\1\16\1\62\1\43\1\11\1\60" + "\1\5\1\23\1\14\1\62\1\15\1\13\1\17\1\21\1\22\1\7"
	    + "\1\56\2\62\1\35\1\47\1\36\1\65\uff81\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 = "\2\0\1\1\1\2\1\1\14\3\1\4\1\5\1\6"
	    + "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16" + "\1\17\1\20\1\21\1\3\1\1\1\22\1\23\2\1"
	    + "\1\3\1\24\1\25\1\26\1\27\1\1\1\30\1\31" + "\1\30\12\3\1\32\1\3\1\33\1\3\1\34\1\35"
	    + "\1\36\1\3\1\37\1\40\1\41\1\42\1\43\1\3" + "\1\0\1\44\17\3\1\45\1\46\3\3\1\47\5\3"
	    + "\1\50\1\3\1\51\1\52\3\3\1\53\1\54\1\55" + "\2\3\1\56\2\3\1\57\1\60\2\3\1\61\1\3"
	    + "\1\62\1\63\1\3\1\64\1\65";

    private static int[] zzUnpackAction() {
	int[] result = new int[124];
	int offset = 0;
	offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
	return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
	int i = 0; /* index in packed string */
	int j = offset; /* index in unpacked array */
	int l = packed.length();
	while (i < l) {
	    int count = packed.charAt(i++);
	    int value = packed.charAt(i++);
	    do
		result[j++] = value;
	    while (--count > 0);
	}
	return j;
    }

    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 = "\0\0\0\66\0\154\0\154\0\242\0\330\0\u010e\0\u0144"
	    + "\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4"
	    + "\0\u032a\0\u0360\0\u0396\0\154\0\u03cc\0\u0402\0\154\0\154"
	    + "\0\154\0\154\0\154\0\154\0\154\0\154\0\154\0\u0438"
	    + "\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\154\0\154"
	    + "\0\154\0\u05b2\0\u05e8\0\154\0\154\0\u061e\0\u0654\0\u068a"
	    + "\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a"
	    + "\0\u01b0\0\u0870\0\u01b0\0\u08a6\0\154\0\154\0\154\0\u08dc"
	    + "\0\154\0\154\0\154\0\154\0\154\0\u0912\0\u0948\0\u01b0"
	    + "\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8"
	    + "\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\154"
	    + "\0\u01b0\0\u0ca8\0\u0cde\0\u0d14\0\u01b0\0\u0d4a\0\u0d80\0\u0db6"
	    + "\0\u0dec\0\u0e22\0\u01b0\0\u0e58\0\u01b0\0\u01b0\0\u0e8e\0\u0ec4"
	    + "\0\u0efa\0\u01b0\0\u01b0\0\u01b0\0\u0f30\0\u0f66\0\u01b0\0\u0f9c"
	    + "\0\u0fd2\0\u01b0\0\u01b0\0\u1008\0\u103e\0\u01b0\0\u1074\0\u01b0" + "\0\u01b0\0\u10aa\0\u01b0\0\u01b0";

    private static int[] zzUnpackRowMap() {
	int[] result = new int[124];
	int offset = 0;
	offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
	return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
	int i = 0; /* index in packed string */
	int j = offset; /* index in unpacked array */
	int l = packed.length();
	while (i < l) {
	    int high = packed.charAt(i++) << 16;
	    result[j++] = high | packed.charAt(i++);
	}
	return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 = "\1\3\3\4\1\5\1\6\1\7\1\10\1\11\2\12"
	    + "\1\13\1\14\1\15\1\16\1\17\1\20\1\12\1\21" + "\1\12\1\22\1\23\1\24\1\25\1\26\1\27\1\30"
	    + "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40" + "\1\12\1\41\1\42\1\43\1\44\1\45\1\46\1\47"
	    + "\1\12\1\50\1\51\3\12\1\52\1\12\1\3\1\53" + "\1\3\3\54\1\55\1\56\61\54\71\0\1\4\67\0"
	    + "\1\12\1\57\15\12\16\0\2\12\3\0\1\12\1\0" + "\1\12\1\0\1\12\2\0\6\12\7\0\4\12\1\60"
	    + "\12\12\16\0\2\12\3\0\1\12\1\0\1\12\1\0" + "\1\12\2\0\1\61\5\12\7\0\17\12\16\0\2\12"
	    + "\3\0\1\12\1\0\1\12\1\0\1\62\2\0\6\12" + "\7\0\4\12\1\63\1\64\10\12\1\65\16\0\2\12"
	    + "\3\0\1\12\1\0\1\12\1\0\1\12\2\0\6\12" + "\7\0\17\12\16\0\2\12\3\0\1\12\1\0\1\12"
	    + "\1\0\1\12\2\0\6\12\7\0\2\12\1\66\14\12" + "\16\0\2\12\3\0\1\12\1\0\1\12\1\0\1\12"
	    + "\2\0\6\12\7\0\10\12\1\67\6\12\16\0\2\12" + "\3\0\1\12\1\0\1\12\1\0\1\12\2\0\6\12"
	    + "\7\0\1\12\1\70\15\12\16\0\2\12\3\0\1\12" + "\1\0\1\12\1\0\1\12\2\0\6\12\7\0\17\12"
	    + "\16\0\2\12\3\0\1\12\1\0\1\71\1\0\1\12" + "\2\0\6\12\7\0\10\12\1\72\6\12\16\0\2\12"
	    + "\3\0\1\12\1\0\1\12\1\0\1\12\2\0\6\12" + "\7\0\16\12\1\73\16\0\2\12\3\0\1\12\1\0"
	    + "\1\12\1\0\1\12\2\0\6\12\7\0\16\12\1\74" + "\16\0\2\12\3\0\1\12\1\0\1\12\1\0\1\12"
	    + "\2\0\6\12\26\0\1\75\66\0\1\76\67\0\1\54" + "\66\0\1\77\42\0\10\12\1\100\6\12\16\0\2\12"
	    + "\3\0\1\12\1\0\1\12\1\0\1\12\2\0\6\12" + "\32\0\1\101\65\0\1\102\65\0\1\103\104\0\1\104"
	    + "\66\0\1\105\22\0\5\12\1\106\11\12\16\0\2\12" + "\3\0\1\12\1\0\1\12\1\0\1\12\2\0\6\12"
	    + "\63\0\1\52\5\0\1\107\3\0\61\107\3\0\1\55" + "\67\0\2\12\1\110\14\12\16\0\2\12\3\0\1\12"
	    + "\1\0\1\12\1\0\1\12\2\0\6\12\7\0\6\12" + "\1\111\10\12\16\0\2\12\3\0\1\12\1\0\1\12"
	    + "\1\0\1\12\2\0\6\12\7\0\12\12\1\112\4\12" + "\16\0\2\12\3\0\1\12\1\0\1\12\1\0\1\12"
	    + "\2\0\6\12\7\0\11\12\1\113\5\12\16\0\2\12" + "\3\0\1\12\1\0\1\12\1\0\1\12\2\0\6\12"
	    + "\7\0\5\12\1\114\11\12\16\0\2\12\3\0\1\12" + "\1\0\1\12\1\0\1\12\2\0\6\12\7\0\6\12"
	    + "\1\115\10\12\16\0\2\12\3\0\1\12\1\0\1\12" + "\1\0\1\12\2\0\6\12\7\0\1\116\16\12\16\0"
	    + "\2\12\3\0\1\12\1\0\1\12\1\0\1\12\2\0" + "\6\12\7\0\11\12\1\117\5\12\16\0\2\12\3\0"
	    + "\1\12\1\0\1\12\1\0\1\12\2\0\6\12\7\0" + "\11\12\1\120\4\12\1\121\16\0\2\12\3\0\1\12"
	    + "\1\0\1\12\1\0\1\12\2\0\6\12\7\0\5\12" + "\1\122\4\12\1\123\4\12\16\0\2\12\3\0\1\12"
	    + "\1\0\1\12\1\0\1\12\2\0\6\12\7\0\14\12" + "\1\124\2\12\16\0\2\12\3\0\1\12\1\0\1\12"
	    + "\1\0\1\12\2\0\6\12\7\0\11\12\1\125\5\12" + "\16\0\2\12\3\0\1\12\1\0\1\12\1\0\1\12"
	    + "\2\0\6\12\7\0\1\12\1\126\15\12\16\0\2\12" + "\3\0\1\12\1\0\1\12\1\0\1\12\2\0\6\12"
	    + "\7\0\4\12\1\127\12\12\16\0\2\12\3\0\1\12" + "\1\0\1\12\1\0\1\12\2\0\6\12\66\0\1\130"
	    + "\6\0\1\12\1\131\15\12\16\0\2\12\3\0\1\12" + "\1\0\1\12\1\0\1\12\2\0\6\12\7\0\1\12"
	    + "\1\132\15\12\16\0\2\12\3\0\1\12\1\0\1\12" + "\1\0\1\12\2\0\6\12\7\0\4\12\1\133\12\12"
	    + "\16\0\2\12\3\0\1\12\1\0\1\12\1\0\1\12" + "\2\0\6\12\7\0\6\12\1\134\10\12\16\0\2\12"
	    + "\3\0\1\12\1\0\1\12\1\0\1\12\2\0\6\12" + "\7\0\1\12\1\135\15\12\16\0\2\12\3\0\1\12"
	    + "\1\0\1\12\1\0\1\12\2\0\6\12\7\0\6\12" + "\1\136\3\12\1\137\4\12\16\0\2\12\3\0\1\12"
	    + "\1\0\1\12\1\0\1\12\2\0\6\12\7\0\12\12" + "\1\140\4\12\16\0\2\12\3\0\1\12\1\0\1\12"
	    + "\1\0\1\12\2\0\6\12\7\0\1\141\16\12\16\0" + "\2\12\3\0\1\12\1\0\1\12\1\0\1\12\2\0"
	    + "\6\12\7\0\17\12\16\0\2\12\3\0\1\12\1\0" + "\1\12\1\0\1\12\2\0\1\12\1\142\4\12\7\0"
	    + "\13\12\1\143\3\12\16\0\2\12\3\0\1\12\1\0" + "\1\12\1\0\1\12\2\0\6\12\7\0\14\12\1\144"
	    + "\2\12\16\0\2\12\3\0\1\12\1\0\1\12\1\0" + "\1\12\2\0\6\12\7\0\1\12\1\145\15\12\16\0"
	    + "\2\12\3\0\1\12\1\0\1\12\1\0\1\12\2\0" + "\6\12\7\0\13\12\1\146\3\12\16\0\2\12\3\0"
	    + "\1\12\1\0\1\12\1\0\1\12\2\0\6\12\7\0" + "\5\12\1\147\11\12\16\0\2\12\3\0\1\12\1\0"
	    + "\1\12\1\0\1\12\2\0\6\12\7\0\6\12\1\150" + "\10\12\16\0\2\12\3\0\1\12\1\0\1\12\1\0"
	    + "\1\12\2\0\6\12\7\0\1\151\16\12\16\0\2\12" + "\3\0\1\12\1\0\1\12\1\0\1\12\2\0\6\12"
	    + "\7\0\1\12\1\152\15\12\16\0\2\12\3\0\1\12" + "\1\0\1\12\1\0\1\12\2\0\6\12\7\0\6\12"
	    + "\1\153\10\12\16\0\2\12\3\0\1\12\1\0\1\12" + "\1\0\1\12\2\0\6\12\7\0\12\12\1\154\4\12"
	    + "\16\0\2\12\3\0\1\12\1\0\1\12\1\0\1\12" + "\2\0\6\12\7\0\11\12\1\155\5\12\16\0\2\12"
	    + "\3\0\1\12\1\0\1\12\1\0\1\12\2\0\6\12" + "\7\0\3\12\1\156\13\12\16\0\2\12\3\0\1\12"
	    + "\1\0\1\12\1\0\1\12\2\0\6\12\7\0\12\12" + "\1\157\4\12\16\0\2\12\3\0\1\12\1\0\1\12"
	    + "\1\0\1\12\2\0\6\12\7\0\10\12\1\160\6\12" + "\16\0\2\12\3\0\1\12\1\0\1\12\1\0\1\12"
	    + "\2\0\6\12\7\0\10\12\1\161\6\12\16\0\2\12" + "\3\0\1\12\1\0\1\12\1\0\1\12\2\0\6\12"
	    + "\7\0\17\12\16\0\1\12\1\162\3\0\1\12\1\0" + "\1\12\1\0\1\12\2\0\6\12\7\0\1\12\1\163"
	    + "\15\12\16\0\2\12\3\0\1\12\1\0\1\12\1\0" + "\1\12\2\0\6\12\7\0\13\12\1\164\3\12\16\0"
	    + "\2\12\3\0\1\12\1\0\1\12\1\0\1\12\2\0" + "\6\12\7\0\1\165\16\12\16\0\2\12\3\0\1\12"
	    + "\1\0\1\12\1\0\1\12\2\0\6\12\7\0\17\12" + "\16\0\2\12\3\0\1\12\1\0\1\12\1\0\1\166"
	    + "\2\0\6\12\7\0\5\12\1\167\11\12\16\0\2\12" + "\3\0\1\12\1\0\1\12\1\0\1\12\2\0\6\12"
	    + "\7\0\1\170\16\12\16\0\2\12\3\0\1\12\1\0" + "\1\12\1\0\1\12\2\0\6\12\7\0\6\12\1\171"
	    + "\10\12\16\0\2\12\3\0\1\12\1\0\1\12\1\0" + "\1\12\2\0\6\12\7\0\14\12\1\172\2\12\16\0"
	    + "\2\12\3\0\1\12\1\0\1\12\1\0\1\12\2\0" + "\6\12\7\0\17\12\16\0\2\12\3\0\1\12\1\0"
	    + "\1\12\1\0\1\12\2\0\2\12\1\173\3\12\7\0" + "\1\12\1\174\15\12\16\0\2\12\3\0\1\12\1\0"
	    + "\1\12\1\0\1\12\2\0\6\12\2\0";

    private static int[] zzUnpackTrans() {
	int[] result = new int[4320];
	int offset = 0;
	offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
	return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
	int i = 0; /* index in packed string */
	int j = offset; /* index in unpacked array */
	int l = packed.length();
	while (i < l) {
	    int count = packed.charAt(i++);
	    int value = packed.charAt(i++);
	    value--;
	    do
		result[j++] = value;
	    while (--count > 0);
	}
	return j;
    }

    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = { "Unkown internal scanner error", "Error: could not match input",
	    "Error: pushback value was too large" };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 = "\2\0\2\11\17\1\1\11\2\1\11\11\7\1\3\11"
	    + "\2\1\2\11\17\1\3\11\1\1\5\11\1\1\1\0" + "\20\1\1\11\44\1";

    private static int[] zzUnpackAttribute() {
	int[] result = new int[124];
	int offset = 0;
	offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
	return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
	int i = 0; /* index in packed string */
	int j = offset; /* index in unpacked array */
	int l = packed.length();
	while (i < l) {
	    int count = packed.charAt(i++);
	    int value = packed.charAt(i++);
	    do
		result[j++] = value;
	    while (--count > 0);
	}
	return j;
    }

    /** the input device */
    private java.io.Reader zzReader;

    /** the current state of the DFA */
    private int zzState;

    /** the current lexical state */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is the source of the
     * yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /** the textposition at the last accepting state */
    private int zzMarkedPos;

    /** the current text position in the buffer */
    private int zzCurrentPos;

    /** startRead marks the beginning of the yytext() string in the buffer */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read from input
     */
    private int zzEndRead;

    /** number of newlines encountered up to the start of the matched text */
    private int yyline;

    /** the number of characters up to the start of the matched text */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the matched
     * text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /** zzAtEOF == true <=> the scanner is at the EOF */
    private boolean zzAtEOF;

    /** denotes if the user-EOF-code has already been executed */
    private boolean zzEOFDone;

    /* user code: */
    // ukljucivanje informacije o poziciji tokena
    private Symbol new_symbol(int type) {
	return new Symbol(type, yyline + 1, yycolumn);
    }

    // ukljucivanje informacije o poziciji tokena
    private Symbol new_symbol(int type, Object value) {
	return new Symbol(type, yyline + 1, yycolumn, value);
    }

    /**
     * Creates a new scanner There is also a java.io.InputStream version of this
     * constructor.
     *
     * @param in the java.io.Reader to read input from.
     */
    Yylex(java.io.Reader in) {
	this.zzReader = in;
    }

    /**
     * Creates a new scanner. There is also java.io.Reader version of this
     * constructor.
     *
     * @param in the java.io.Inputstream to read input from.
     */
    Yylex(java.io.InputStream in) {
	this(new java.io.InputStreamReader(in));
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
	char[] map = new char[0x10000];
	int i = 0; /* index in packed string */
	int j = 0; /* index in unpacked array */
	while (i < 134) {
	    int count = packed.charAt(i++);
	    char value = packed.charAt(i++);
	    do
		map[j++] = value;
	    while (--count > 0);
	}
	return map;
    }

    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * 
     * @exception java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

	/* first: make room (if you can) */
	if (zzStartRead > 0) {
	    System.arraycopy(zzBuffer, zzStartRead, zzBuffer, 0, zzEndRead - zzStartRead);

	    /* translate stored positions */
	    zzEndRead -= zzStartRead;
	    zzCurrentPos -= zzStartRead;
	    zzMarkedPos -= zzStartRead;
	    zzStartRead = 0;
	}

	/* is the buffer big enough? */
	if (zzCurrentPos >= zzBuffer.length) {
	    /* if not: blow it up */
	    char newBuffer[] = new char[zzCurrentPos * 2];
	    System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
	    zzBuffer = newBuffer;
	}

	/* finally: fill the buffer with new input */
	int numRead = zzReader.read(zzBuffer, zzEndRead, zzBuffer.length - zzEndRead);

	if (numRead > 0) {
	    zzEndRead += numRead;
	    return false;
	}
	// unlikely but not impossible: read 0 characters, but not at end of stream
	if (numRead == 0) {
	    int c = zzReader.read();
	    if (c == -1) {
		return true;
	    } else {
		zzBuffer[zzEndRead++] = (char) c;
		return false;
	    }
	}

	// numRead < 0
	return true;
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
	zzAtEOF = true; /* indicate end of file */
	zzEndRead = zzStartRead; /* invalidate buffer */

	if (zzReader != null)
	    zzReader.close();
    }

    /**
     * Resets the scanner to read from a new input stream. Does not close the old
     * reader.
     *
     * All internal variables are reset, the old input stream <b>cannot</b> be
     * reused (internal buffer is discarded and lost). Lexical state is set to
     * <tt>ZZ_INITIAL</tt>.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
	zzReader = reader;
	zzAtBOL = true;
	zzAtEOF = false;
	zzEOFDone = false;
	zzEndRead = zzStartRead = 0;
	zzCurrentPos = zzMarkedPos = 0;
	yyline = yychar = yycolumn = 0;
	zzLexicalState = YYINITIAL;
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
	return zzLexicalState;
    }

    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
	zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
	return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Returns the character at position <tt>pos</tt> from the matched text.
     * 
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch. A value from 0 to
     *            yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
	return zzBuffer[zzStartRead + pos];
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
	return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of yypushback(int) and a
     * match-all fallback rule) this method will only be called with things that
     * "Can't Possibly Happen". If this method is called, something is seriously
     * wrong (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done in error fallback
     * rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
	String message;
	try {
	    message = ZZ_ERROR_MSG[errorCode];
	} catch (ArrayIndexOutOfBoundsException e) {
	    message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
	}

	throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again. This number must not
     *               be greater than yylength()!
     */
    public void yypushback(int number) {
	if (number > yylength())
	    zzScanError(ZZ_PUSHBACK_2BIG);

	zzMarkedPos -= number;
    }

    /**
     * Contains user EOF-code, which will be executed exactly once, when the end of
     * file is reached
     */
    private void zzDoEOF() throws java.io.IOException {
	if (!zzEOFDone) {
	    zzEOFDone = true;
	    yyclose();
	}
    }

    /**
     * Resumes scanning until the next regular expression is matched, the end of
     * input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException if any I/O-Error occurs
     */
    public java_cup.runtime.Symbol next_token() throws java.io.IOException {
	int zzInput;
	int zzAction;

	// cached fields:
	int zzCurrentPosL;
	int zzMarkedPosL;
	int zzEndReadL = zzEndRead;
	char[] zzBufferL = zzBuffer;
	char[] zzCMapL = ZZ_CMAP;

	int[] zzTransL = ZZ_TRANS;
	int[] zzRowMapL = ZZ_ROWMAP;
	int[] zzAttrL = ZZ_ATTRIBUTE;

	while (true) {
	    zzMarkedPosL = zzMarkedPos;

	    boolean zzR = false;
	    for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL; zzCurrentPosL++) {
		switch (zzBufferL[zzCurrentPosL]) {
		case '\u000B':
		case '\u000C':
		case '\u0085':
		case '\u2028':
		case '\u2029':
		    yyline++;
		    yycolumn = 0;
		    zzR = false;
		    break;
		case '\r':
		    yyline++;
		    yycolumn = 0;
		    zzR = true;
		    break;
		case '\n':
		    if (zzR)
			zzR = false;
		    else {
			yyline++;
			yycolumn = 0;
		    }
		    break;
		default:
		    zzR = false;
		    yycolumn++;
		}
	    }

	    if (zzR) {
		// peek one character ahead if it is \n (if we have counted one line too much)
		boolean zzPeek;
		if (zzMarkedPosL < zzEndReadL)
		    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
		else if (zzAtEOF)
		    zzPeek = false;
		else {
		    boolean eof = zzRefill();
		    zzEndReadL = zzEndRead;
		    zzMarkedPosL = zzMarkedPos;
		    zzBufferL = zzBuffer;
		    if (eof)
			zzPeek = false;
		    else
			zzPeek = zzBufferL[zzMarkedPosL] == '\n';
		}
		if (zzPeek)
		    yyline--;
	    }
	    zzAction = -1;

	    zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

	    zzState = ZZ_LEXSTATE[zzLexicalState];

	    zzForAction: {
		while (true) {

		    if (zzCurrentPosL < zzEndReadL)
			zzInput = zzBufferL[zzCurrentPosL++];
		    else if (zzAtEOF) {
			zzInput = YYEOF;
			break zzForAction;
		    } else {
			// store back cached positions
			zzCurrentPos = zzCurrentPosL;
			zzMarkedPos = zzMarkedPosL;
			boolean eof = zzRefill();
			// get translated positions and possibly new buffer
			zzCurrentPosL = zzCurrentPos;
			zzMarkedPosL = zzMarkedPos;
			zzBufferL = zzBuffer;
			zzEndReadL = zzEndRead;
			if (eof) {
			    zzInput = YYEOF;
			    break zzForAction;
			} else {
			    zzInput = zzBufferL[zzCurrentPosL++];
			}
		    }
		    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
		    if (zzNext == -1)
			break zzForAction;
		    zzState = zzNext;

		    int zzAttributes = zzAttrL[zzState];
		    if ((zzAttributes & 1) == 1) {
			zzAction = zzState;
			zzMarkedPosL = zzCurrentPosL;
			if ((zzAttributes & 8) == 8)
			    break zzForAction;
		    }

		}
	    }

	    // store back cached position
	    zzMarkedPos = zzMarkedPosL;

	    switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
	    case 30: {
		return new_symbol(sym.SAME);
	    }
	    case 54:
		break;
	    case 50: {
		return new_symbol(sym.RETURN);
	    }
	    case 55:
		break;
	    case 28: {
		return new_symbol(sym.PLUSPLUS);
	    }
	    case 56:
		break;
	    case 27: {
		return new_symbol(sym.DO);
	    }
	    case 57:
		break;
	    case 4: {
		return new_symbol(sym.PLUS);
	    }
	    case 58:
		break;
	    case 19: {
		return new_symbol(sym.LESS);
	    }
	    case 59:
		break;
	    case 23: {
		return new_symbol(sym.NUMBER, new Integer(yytext()));
	    }
	    case 60:
		break;
	    case 41: {
		return new_symbol(sym.TRUE);
	    }
	    case 61:
		break;
	    case 22: {
		return new_symbol(sym.POINT);
	    }
	    case 62:
		break;
	    case 3: {
		return new_symbol(sym.IDENT, yytext());
	    }
	    case 63:
		break;
	    case 26: {
		return new_symbol(sym.IF);
	    }
	    case 64:
		break;
	    case 39: {
		return new_symbol(sym.CASE);
	    }
	    case 65:
		break;
	    case 42: {
		return new_symbol(sym.VOID);
	    }
	    case 66:
		break;
	    case 21: {
		return new_symbol(sym.COL);
	    }
	    case 67:
		break;
	    case 38: {
		return new_symbol(sym.ELSE);
	    }
	    case 68:
		break;
	    case 37: {
		return new_symbol(sym.LETTER, new String(yytext()));
	    }
	    case 69:
		break;
	    case 49: {
		return new_symbol(sym.SWITCH);
	    }
	    case 70:
		break;
	    case 34: {
		return new_symbol(sym.OR);
	    }
	    case 71:
		break;
	    case 11: {
		return new_symbol(sym.LPAREN);
	    }
	    case 72:
		break;
	    case 35: {
		return new_symbol(sym.AND);
	    }
	    case 73:
		break;
	    case 33: {
		return new_symbol(sym.LESSEQUAL);
	    }
	    case 74:
		break;
	    case 25: {
		yybegin(YYINITIAL);
	    }
	    case 75:
		break;
	    case 7: {
		return new_symbol(sym.DIV);
	    }
	    case 76:
		break;
	    case 14: {
		return new_symbol(sym.RBRACE);
	    }
	    case 77:
		break;
	    case 52: {
		return new_symbol(sym.PROG);
	    }
	    case 78:
		break;
	    case 31: {
		return new_symbol(sym.DIFFERENT);
	    }
	    case 79:
		break;
	    case 20: {
		return new_symbol(sym.MOD);
	    }
	    case 80:
		break;
	    case 24: {
		yybegin(COMMENT);
	    }
	    case 81:
		break;
	    case 6: {
		return new_symbol(sym.TIMES);
	    }
	    case 82:
		break;
	    case 9: {
		return new_symbol(sym.SEMI);
	    }
	    case 83:
		break;
	    case 17: {
		return new_symbol(sym.QUEST);
	    }
	    case 84:
		break;
	    case 51: {
		return new_symbol(sym.EXTENDS);
	    }
	    case 85:
		break;
	    case 47: {
		return new_symbol(sym.BREAK);
	    }
	    case 86:
		break;
	    case 43: {
		return new_symbol(sym.WHILE);
	    }
	    case 87:
		break;
	    case 8: {
		return new_symbol(sym.EQUAL);
	    }
	    case 88:
		break;
	    case 53: {
		return new_symbol(sym.CONTINUE);
	    }
	    case 89:
		break;
	    case 1: {
		System.err.println(
			"Leksicka greska (" + yytext() + ") u liniji " + (yyline + 1) + "i koloni " + (yycolumn + 1));
	    }
	    case 90:
		break;
	    case 15: {
		return new_symbol(sym.LBRACKET);
	    }
	    case 91:
		break;
	    case 40: {
		return new_symbol(sym.READ);
	    }
	    case 92:
		break;
	    case 18: {
		return new_symbol(sym.GREATER);
	    }
	    case 93:
		break;
	    case 5: {
		return new_symbol(sym.MINUS);
	    }
	    case 94:
		break;
	    case 46: {
		return new_symbol(sym.PRINT);
	    }
	    case 95:
		break;
	    case 12: {
		return new_symbol(sym.RPAREN);
	    }
	    case 96:
		break;
	    case 16: {
		return new_symbol(sym.RBRACKET);
	    }
	    case 97:
		break;
	    case 36: {
		return new_symbol(sym.NEW);
	    }
	    case 98:
		break;
	    case 29: {
		return new_symbol(sym.MINUSMINUS);
	    }
	    case 99:
		break;
	    case 45: {
		return new_symbol(sym.CONST);
	    }
	    case 100:
		break;
	    case 10: {
		return new_symbol(sym.COMMA);
	    }
	    case 101:
		break;
	    case 13: {
		return new_symbol(sym.LBRACE);
	    }
	    case 102:
		break;
	    case 48: {
		return new_symbol(sym.FALSE);
	    }
	    case 103:
		break;
	    case 44: {
		return new_symbol(sym.CLASS);
	    }
	    case 104:
		break;
	    case 2: {
	    }
	    case 105:
		break;
	    case 32: {
		return new_symbol(sym.GREATEREQUAL);
	    }
	    case 106:
		break;
	    default:
		if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
		    zzAtEOF = true;
		    zzDoEOF();
		    {
			return new_symbol(sym.EOF);
		    }
		} else {
		    zzScanError(ZZ_NO_MATCH);
		}
	    }
	}
    }

}
